@startuml
'skinparam linetype ortho
skinparam linetype polyline

'skinparam style strictuml
'skinparam groupInheritance 1


class Engine{
    +startApplication()
    +startGame()
    +endGame()
}
Engine o- Scene

class Scene{
    +addEntity()
    +roundEnded()
    +getManager() : GameManager
    +solarFlare()
}
Scene " #scene [1]" *- " #entities [1..*]" Entity
Scene "-scene" --* "-manager" GameManager

class GameManager{
    -selectedVessel:Vessel
    -sunDistance: int
    -allPLayers: Player[1..*]
    -asteroids: Asteroid[1..*]
    -gameEnded: bool
    --
    +initGame()
    +addPlayer(p:Player)
    +startGame()
    +takeTurn()
    +endGame()
    +isSunStormActive() : bool
    ..
    -generateScene()
    -generateAsteroids()
    -generateNewResource() : Resource
}
GameManager -- "-currentPlayer [1]" Player
GameManager -- "-settlers [1..*]" SpaceShip

class Player{
    -name:string
}
Player "-owner[1]" -- Vessel
Player -- "-searchingFor [0..1]" Resource



class Item{
    {abstract} + NearSun()
    {abstract} + Satisfies():bool
    Activate()
}
Item -- "-inventory [1]" IInventory

class TeleportGateItem{
    +Satisfies():bool
    ..
    Activate()
}
TeleportGateItem --|> Item


class Resource{

}
Resource --|> Item


class Iron{
    +Satisfies():bool
}
Resource <|-- Iron

class Ice{
    +Satisfies():bool
}
Resource <|-- Ice

class Uranium{
    int counter
    +Satisfies():bool
}
Resource <|-- Uranium

class Coal{
    +Satisfies():bool
}
Coal --|> Resource

class Titanium{
    +Satisfies():bool
}
Titanium --|> Resource


'Inventory stuff

interface IInventory{
    List<Item> getItems()
    bool tryInsertItem(i:Item)
    bool insertItem(i:Item)
    bool removeItem(Item i)
}

class InfiniteInvetory{

}
InfiniteInvetory --|> IInventory
InfiniteInvetory "items" --* Item

class AsteroidInventory{
    
}
AsteroidInventory --|> IInventory
AsteroidInventory "items" --* Item

class SSInvetory{
    
    -tgs: List<TeleportGateItem>
    -items: List<Item>
}
SSInvetory --|> IInventory
'SSInvetory "items" -* Item
'SSInvetory "tgs" -* TeleportGateItem


'Entities

class Entity{
    Vector2 pos

    +roundEnd()
    +getScene():Scene
    {abstract} +solarFlare()
    {abstract} +explode()
}

enum AsteroidPlaces{
    Inside
    Orbit
    Vessel
}

class MovableEntity{
    AsteroidPlaces getPlace()
    ..
    +void move(Asteroid to)
    +void asteroidExploded()
}
MovableEntity --|> Entity
AsteroidPlaces . MovableEntity
Asteroid "-curentAsteroid" -- MovableEntity

class Vessel{
    -isHidden : bool
    --
    {abstract} #IInventory getInventory()
    {abstract} +getHidingSpaceRequirement():int
    ..
    +void Vessel(p:Player, a:Asteroid):Vessel
    +void hide()
    +void exitHiding()
    +void drill()
    +void mine()
    +void explode()
    +void solarFlare()
}
Vessel --|> MovableEntity


class UFO{
    IInventory getInventory()
}
UFO --|> Vessel
UFO *-- "1" InfiniteInvetory 

class SpaceShip{
    #IInventory getInventory()

    +void SpaceShip(p:Player, a:Asteroid)
    +getHidingSpaceRequirement():int
    +craft(recipe:Recipe)
    +placeItem(i:Item):bool
    +activateItem(i:Item)
}
SpaceShip --|> Vessel
SpaceShip *-- "-inventory [1]" SSInvetory 

class Robot{

    +Robot(p:Player,a:Asteroid)
    +getInventory():IInventory 
}
Robot --|> Vessel




class Asteroid{
    -exploded:bool
    -coreSize:int
    -maxHidingSpace:int
    -crustSize:int
    -revealed:bool
    -visited:bool
    -hidingVessel:Vessel
    --
    -stationed:Vessel[0..*]
    -orbit:MovableEntity[0..*]
    -inside:MovableEntity[0..*]
    --
    +Asteroid(r:Resource,amount:int)
    +solarFlare()
    +explode()
    +reveal()
    +reachableAsteroids():Asteroid[1..*]
    +addNeighbour(a:Asteroid)
    ..
    +arrive(v:MovableVessel)
    +depart(v:MovableVessel)
    ..
    +hide(v:Vessel):bool
    +exit(v:Vessel)
    +getAvailableHidingSpace():int
    ..
    +drill()
    +mine():Item
    ..
    +addBuilding(b:Building)
    +placeItem(i:Item)
    +getInventory():IInventory
}
Asteroid *-- "-inventory [1]" AsteroidInventory 
Asteroid --* "-neighbours [1..*]" Asteroid

class Building{
    +getRoutes():Asteroid[0..*]
}
Building --|> MovableEntity

class TeleportGate{
    -int gateId
    -pair: TeleportGate
    +PairDestroyed()
}
TeleportGate --|> Building

class SpaceStation{

}
SpaceStation --|> Building



class Recipe{
    +canCraft(s: SpaceShip): bool
    +craft(s: SpaceShip)
    {abstract} #makeResult(s:SpaceShip)
}
Item "-input [1..*]" -- Recipe 

class TeleportGateRecipe{
    #makeResult(s:SpaceShip)
}
TeleportGateRecipe --|> Recipe

class SpaceStationRecipe{
    #makeResult(s:SpaceShip)
}
SpaceStationRecipe --|> Recipe

class RobotRecipe{
    #makeResult(s:SpaceShip)    
}
RobotRecipe --|> Recipe


legend

|= field |= method |=  |
|  <img:http://s.plantuml.com/private-field.png>     |   <img:http://s.plantuml.com/private-method.png>     | private |
|  <img:http://s.plantuml.com/protected-field.png>   |   <img:http://s.plantuml.com/protected-method.png>   | protected |
|  <img:http://s.plantuml.com/package-private-field.png>     |   <img:http://s.plantuml.com/package-private-method.png>    | package private |
|  <img:http://s.plantuml.com/public-field.png>     |   <img:http://s.plantuml.com/public-method.png>     | public |

endlegend

footer
A diagrammon bizonyos kapcolatokat nem aggregációs vonallal hanem mezőzel jelöltük a könnyeb olvashatóság érdekében.

endfooter


@enduml