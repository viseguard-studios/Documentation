@startuml

package "javax.swing"#DDDDDD{

    class JFrame{
    }
    class JPanel {
        
    }
}

interface INotifyPropertyChanged {

    +  addListener(l:StateChangedListener)
    +  removeListener(l:StateChangedListener)
}

interface StateChangedListener{
    +  stateChanged()
}

class MainWindow{
    - eng : Engine
    - active : JPanel

    + MainWindow()
    + stateChanged()    
}
MainWindow --|> JFrame
MainWindow --|> StateChangedListener

class InGameGUI {
    + InGameGUI()
}
InGameGUI --|> JPanel


class MapViewPanel {
    -scene:Scene
    +MapViewPanel()
    +paint(g:Graphics)
    +stateChanged()
}
MapViewPanel --|> StateChangedListener
MapViewPanel --|> JPanel

class SelectionInspectorPanel  {
    - scene: Scene
    - selected:Entity 
    - t2:JTextArea 

    + SelectionInspectorPanel() 
    + selectionChanged(index:int)
    + stateChanged() 
}
SelectionInspectorPanel --|> StateChangedListener
SelectionInspectorPanel --|> JPanel

class ActionBar{
    +ActionBar()
}
ActionBar --|>JPanel

class ConsoleLogPanel{
    - log:String[0..*] 

    + ConsoleLogPanel()
    + stateChanged()
}
ConsoleLogPanel --|>JPanel
ConsoleLogPanel --|>StateChangedListener


class PlayerList {

    +PlayerList()
    +doPlayerList()
    +stateChanged()
}
PlayerList --|>JPanel
PlayerList --|>StateChangedListener


 class MainMenu{

    + MainMenu()
}
MainMenu--|>JPanel


class GameManager {
    - selectedEntity: Entity
    - listeners: StateChangedListener[0..*] 

    + getSelectedEntity():Entity
    + setSelectedEntity(e:Entity)
    + addListener(l:StateChangedListener) 
    + removeListener(l:StateChangedListener)
    + notifyListeners()
}
GameManager --|> INotifyPropertyChanged


enum State{
    MainMenu,
    InGame,
    Won,
    Lost
}

class Engine  {
    - gameState:State 
    - listeners: StateChangedListener[0..*] 

    + getGameState():State 
    + setGameState(gameState:State) 
    + addListener(l:StateChangedListener) 
    + removeListener(l:StateChangedListener) 
    + notifyListeners()
}
Engine --|> INotifyPropertyChanged

abstract class Entity {
    + printStatus():String
    + getActions():List<String>
    + doAction(name: String)
}

 class Robot {
    -actions:String[0..*]
    + getActions():List<String>
    + doAction(name: String)
}
Robot --|> Entity

 class SpaceShip {
    -actions:String[0..*]
    + getActions():List<String>
    + doAction(name: String)
}
 SpaceShip--|> Entity

class UFO {
    -actions:String[0..*]
    + getActions():List<String>
    + doAction(name: String)
}
 UFO--|> Entity




@enduml